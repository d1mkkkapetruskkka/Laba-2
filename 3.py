import random
import time


def animate_search():
    print("–ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç—Ä–æ–∫–∏...")
    for _ in range(3):
        time.sleep(0.5)
        print("üîç", end=' ')
        time.sleep(0.5)
    print("\n")


def create_matrix(rows, cols):
    matrix = []
    for _ in range(rows):
        row = []
        for _ in range(cols):
            element = float(input(f"–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Ç—Ä–∏—Ü—ã –≤ —Å—Ç—Ä–æ–∫–µ {_ + 1}, —Å—Ç–æ–ª–±—Ü–µ {_ + 1}: "))
            row.append(element)
        matrix.append(row)


    print("–í–≤–µ–¥–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:")
    for row in matrix:
        print(row)

    return matrix


def find_first_positive_row(matrix):
    try:
        if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):
            raise ValueError("–ú–∞—Ç—Ä–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ø–∏—Å–∫–æ–≤.")

        animate_search()

        for i, row in enumerate(matrix, start=1):
            if all(isinstance(element, (int, float)) and element > 0 for element in row):
                return row, sum(row)

        raise ValueError("–í –º–∞—Ç—Ä–∏—Ü–µ –Ω–µ—Ç —Å—Ç—Ä–æ–∫, –≥–¥–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã.")
    except ValueError as e:
        return None, str(e)


# –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤)
rows = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: "))
cols = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: "))

# –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ç—Ä–∏—Ü—É
matrix = create_matrix(rows, cols)

row, sum_of_elements = find_first_positive_row(matrix)

if row is not None:
    print("–ù–∞—à–ª–∏ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:")
    print("–°—Ç—Ä–æ–∫–∞:", row)
    print(f"–°—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ: {sum_of_elements}")
else:
    print("‚ùå –û—à–∏–±–∫–∞:", sum_of_elements)
